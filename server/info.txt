****Initializing the FASTAPI Project****

1) app = FastAPI()
This creates a new FastAPI application instance.

2) engine = create_engine(URL_DATABASE)
This sets up a connection to the database using SQLAlchemy.

3) SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Creates a session factory for database interactions.

4) Base = declarative_base()
Defines the base class for all SQLAlchemy models.

5) Base.metadata.create_all(bind=engine)
Automatically creates all tables in the database based on the defined models.


****FastAPI & Pydantic Concepts****

6) Depends
Used in route functions to inject dependencies (e.g., database session, authentication).
Should NOT be used in normal functions unless they are also dependencies.

7) response_model
Defines the response format for an endpoint, ensuring consistent API responses.

8) Pydantic Models
Used for request validation and serialization of data.

9) BaseModel in Pydantic
The base class for Pydantic models, which helps in data validation and serialization.

10) class Config: from_attributes = True
Allows Pydantic models to map attributes directly from SQLAlchemy models.

11) model_validate
Converts database objects (ORM models) into Pydantic models while ensuring validation.

****Advanced Concepts****

12) ContextVar
Used to store data per request (e.g., storing the current user ID in a global context).

13) @event.listens_for(BaseModel, 'before_insert', propagate=True)
propagate=True ensures that the event listener applies to all subclasses of BaseModel.
